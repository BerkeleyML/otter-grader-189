"""
Plugin for using Google Sheets to override scores for test cases
"""

import os
import json
import tempfile
import gspread
import pandas as pd
import base64
import google.oauth2.credentials

# from __future__ import print_function
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from googleapiclient.discovery import build
from jinja2 import Template
from textwrap import dedent

from ... import PluginCollection
from ...abstract_plugin import AbstractOtterPlugin


SCOPES = ['https://www.googleapis.com/auth/gmail.send']


class GmailNotifications(AbstractOtterPlugin):
    """
    """

    IMPORTABLE_NAME = "otter.plugins.builtin.GmailNotifications"

    email_template_html = Template(dedent("""\
        <p>Hello {{ student_name }},</p>

        <p>Your submission for assignment <strong>{{ assignment_title }}</strong> submitted at 
        {{ submission_timestamp }} received the following scores on public tests:</p>

        <pre>{{ score_report }}</pre>

        <p>If you have any questions or notice any issues, please contact your instructors.</p>

        <hr>

        <p>This message was automatically generated by Otter-Grader.</p>
    """))

    email_template_plain = Template(dedent("""\
        Hello {{ student_name }},

        Your submission for assignment {{ assignment_title }} submitted at {{ submission_timestamp }} received the following scores on public tests:

        {{ score_report }}

        If you have any questions or notice any issues, please contact your instructors.

        ---

        This message was automatically generated by Otter-Grader.
    """))

    def _authenticate(self):
        """
        """
        try:
            # oauth_json = self.plugin_config["service_account_credentials"]
            # with tempfile.NamedTemporaryFile(mode="w+", suffix=".json") as ntf:
            #     json.dump(oauth_json, ntf)
            #     ntf.seek(0)


                # creds = Credentials.from_service_account_file(ntf.name, scopes=SCOPES)
                # creds = flow.run_local_server(port=0)
            credentials = google.oauth2.credentials.Credentials(
                'token',
                refresh_token=self.plugin_config["refresh_token"],
                token_uri='https://accounts.google.com/o/oauth2/token',
                client_id=self.plugin_config["client_id"],
                client_secret=self.plugin_config["client_secret"],
            )
            self._service = build('gmail', 'v1', credentials=credentials, cache_discovery=False)

            # self._service = build('gmail', 'v1', credentials=creds)

        except Exception as e:
            if self.plugin_config.get("catch_api_error", True):
                print(f"Error encountered while authenticating with Gmail:\n{e}")
            else:
                raise e

    @property
    def service(self):
        """
        The grade override information dataframe
        """
        if not hasattr(self, "_service") or self._service is None:
            self._authenticate()
        return self._service

    def after_grading(self, results):
        """
        Modifies the results of grading by pulling in the Google Sheet as a dataframe and updating 
        the scores for the test cases found.

        Args:
            results (``otter.test_files.GradingResults``): the results of grading
        """
        if self.submission_metadata:
            for user in self.submission_metadata["users"]:
                email_contents = self.email_template_plain.render({
                    "student_name": user["name"],
                    "assignment_title": self.submission_metadata["assignment"]["title"],
                    "submission_timestamp": self.submission_metadata["created_at"],
                    "score_report": results.summary(public_only=True),
                })
                plain_email = MIMEText(email_contents, _subtype="plain")

                email_contents = self.email_template_html.render({
                    "student_name": user["name"],
                    "assignment_title": self.submission_metadata["assignment"]["title"],
                    "submission_timestamp": self.submission_metadata["created_at"],
                    "score_report": results.summary(public_only=True),
                })
                html_email = MIMEText(email_contents, _subtype="html")

                message = MIMEMultipart('alternative')
                message.attach(plain_email)
                message.attach(html_email)
                message["subject"] = f'Autograder Results for { self.submission_metadata["assignment"]["title"] }'
                message["to"] = user["email"]
                message["from"] = self.plugin_config["email"]
                msg = {'raw': base64.urlsafe_b64encode(message.as_bytes()).decode()}

                try:
                    message = self.service.users().messages().send(userId='me', body=msg).execute()
                except Exception as e:
                    if self.plugin_config.get("catch_api_error", True):
                        print(f'An error occurred while emailing results:\n{e}')
                    else:
                        raise e

    # def during_generate(self, otter_config, assignment):
    #     """
    #     Takes a path to Google Service Account credentials stored in this plugin's config as key
    #     ``credentials_json_path`` and extracts the data from that file into the plugin's config as key
    #     ``service_account_credentials``.

    #     Args:
    #         otter_config (``dict``): the parsed Otter configuration JSON file
    #         assignment (``otter.assign.assignment.Assignment``): the assignment configurations if 
    #             Otter Assign is used
    #     """
    #     if assignment is not None:
    #         curr_dir = os.getcwd()
    #         os.chdir(assignment.master.parent)
        
    #     cfg_idx = [self.IMPORTABLE_NAME in c.keys() for c in otter_config["plugins"] if isinstance(c, dict)].index(True)
    #     creds_path = otter_config["plugins"][cfg_idx][self.IMPORTABLE_NAME]["credentials_json_path"]
    #     with open(creds_path) as f:
    #         creds = json.load(f)
    #     otter_config["plugins"][cfg_idx][self.IMPORTABLE_NAME]["service_account_credentials"] = creds
        
    #     if assignment is not None:
    #         os.chdir(curr_dir)
