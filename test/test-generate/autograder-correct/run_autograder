#!/usr/bin/env python3

from otter.execute import grade_notebook
from glob import glob
import json
import os
import shutil
import subprocess
import re
import pandas as pd

SCORE_THRESHOLD = None
POINTS_POSSIBLE = None
SHOW_ALL_ON_RELEASE = False

UTILS_IMPORT_REGEX = r"\"from utils import [\w\*, ]+"
NOTEBOOK_INSTANCE_REGEX = r"otter.Notebook\(.+\)"

if __name__ == "__main__":
    # put files into submission directory
    if os.path.exists("/autograder/source/files"):
        for filename in glob("/autograder/source/files/*.*"):
            shutil.copy(filename, "/autograder/submission")

    # create __init__.py files
    subprocess.run(["touch", "/autograder/__init__.py"])
    subprocess.run(["touch", "/autograder/submission/__init__.py"])

    os.chdir("/autograder/submission")

    # check for *.ipynb.json files
    jsons = glob("*.ipynb.json")
    for file in jsons:
        shutil.copy(file, file[:-5])

    # check for *.ipynb.html files
    htmls = glob("*.ipynb.html")
    for file in htmls:
        shutil.copy(file, file[:-5])

    nb_path = glob("*.ipynb")[0]

    # fix utils import
    try:
        with open(nb_path) as f:
            contents = f.read()
    except UnicodeDecodeError:
        with open(nb_path, "r", encoding="utf-8") as f:
            contents = f.read()

    # contents = re.sub(UTILS_IMPORT_REGEX, "\"from .utils import *", contents)
    contents = re.sub(NOTEBOOK_INSTANCE_REGEX, "otter.Notebook()", contents)

    try:
        with open(nb_path, "w") as f:
            f.write(contents)
    except UnicodeEncodeError:
        with open(nb_path, "w", encoding="utf-8") as f:
            f.write(contents)

    try:
        os.mkdir("/autograder/submission/tests")
    except FileExistsError:
        pass

    tests_glob = glob("/autograder/source/tests/*.py")
    for file in tests_glob:
        shutil.copy(file, "/autograder/submission/tests")

    scores = grade_notebook(nb_path, tests_glob, name="submission", gradescope=True, ignore_errors=True)
    # del scores["TEST_HINTS"]

    failed_test_output = "Failed Tests:"
    output = {"tests" : []}
    for key in scores:
        if key != "total" and key != "possible":
            output["tests"] += [{
                "name" : key,
                "score" : scores[key]["score"],
                "possible": scores[key]["possible"],
                "visibility": ("visible", "hidden")[scores[key]["hidden"]]
            }]
            if "hint" in scores[key]:
                output["tests"][-1]["output"] = repr(scores[key]["hint"])
    # output["visibility"] = "hidden"
    
    if SHOW_ALL_ON_RELEASE:
        output["stdout_visibility"] = "after_published"

    if POINTS_POSSIBLE is not None:
        output["score"] = scores["total"] / scores["possible"] * POINTS_POSSIBLE

    if SCORE_THRESHOLD is not None:
        if scores["total"] / scores["possible"] >= SCORE_THRESHOLD:
            output["score"] = POINTS_POSSIBLE or scores["possible"]
        else:
            output["score"] = 0

    with open("/autograder/results/results.json", "w+") as f:
        json.dump(output, f, indent=4)

    print("\n\n")
    df = pd.DataFrame(output["tests"])
    if "output" in df.columns:
        df.drop(columns=["output"], inplace=True)
    # df.drop(columns=["hidden"], inplace=True)
    print(df)